import { useEffect } from 'react';
import { GetServerSideProps } from 'next';
import Head from 'next/head';
import Link from 'next/link';

import styles from '../styles/pages/index.module.css';
import { Pokemon } from '@/lib/interfaces/pokemon.interface';
import { PokemonStateWithoutFunctions } from '@/lib/zustand/pokemon.state';
import getPokemonStore from '@/lib/zustand/get-pokemon-store.helper';
import usePokemonStore from '@/lib/zustand/use-pokemon-store.hook';
import useCssClasses from '@/lib/hooks/use-css-classes.hook';

interface HomeProps {
  preloadedState: Partial<PokemonStateWithoutFunctions>;
}

export default function Home(props: HomeProps) {
  // (1) access zustand store non-computed and computed properties with usePokemonStore()
  // (2) usePokemonStore() runs in BOTH server and client
  // (3) in server, usePokemonStore() grabs the server-side zustand store and is used
  // for SSR/SSG generation
  // (4) in client, usePokemonStore() grabs the client-side zustand store and is used
  // for dynamic state management
  const filteredPokemons = usePokemonStore((state) => state.filteredPokemons);
  const filter = usePokemonStore((state) => state.filter);
  const setFilter = usePokemonStore((state) => state.setFilter);

  // (1) CSS classes for our main wrapper
  // (2) in server-side and on the first render of the client-side (before next.js hydration),
  // the main wrapper will remain HIDDEN from the end user, yet readable to screen readers and
  // also SEO-friendly
  // (3) why are we doing this? because our filtered pokemons list may vary between what initially
  // comes from the server and what the client would see considering it can manipulate the search filter
  // (4) on the server, the filtered pokemons list is ALWAYS equivalent to the raw, complete pokemons list,
  // since there is no search filter keyworkd over there
  // (5) on the client, the filtered pokemons list is NOT ALWAYS equivalent to the raw, complete pokemons list,
  // since there is a search filter the user can manipulate and persist into local storage
  // (6) not hiding the initial client-side render (the SSR/SSG-generated page) would result in a
  // CONTENT FLICKERING EFFECT: a flash of the old page (SSR/SSG-generated) is seen during a
  // small time frame before the new, updated page appears
  // (7) thus, we initialize our CSS classes with one that hides the content for end users
  const { classes: mainClasses, remove: removeMainClass } = useCssClasses({
    initialClasses: [styles.main, styles['hidden-element']],
  });

  // (1) client-only code: after next.js hydration (second and subsequent client-side renders), remove
  // the hidden CSS class to show the dynamic content
  // (2) source HTML will always have the HTML provided by the server (SSR/SSG)
  // (3) dynamic HTML, controlled via JavaScript with React, can be edited after hydration, meaning we can
  // remove this hidden CSS class and showcase our dynamic content properly
  useEffect(() => {
    removeMainClass(styles['hidden-element']);
  }, [removeMainClass]);

  return (
    <div className={mainClasses}>
      <Head>
        <title>Pokemon</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.png" />
      </Head>
      <div>
        <Link href="/count">Count</Link>
        <input
          type="text"
          value={filter}
          onChange={(e) => setFilter(e.target.value)}
          className={styles.search}
        />
      </div>
      <div className={styles.container}>
        {filteredPokemons.slice(0, 20).map((pokemon) => (
          <div key={pokemon.id} className={styles.image}>
            <img
              alt={pokemon.name}
              src={`http://jherr-pokemon.s3.us-west-1.amazonaws.com/${pokemon.image}`}
            />
            <h2>{pokemon.name}</h2>
          </div>
        ))}
      </div>
    </div>
  );
}

// getServerSideProps can populate some zustand state data
export const getServerSideProps: GetServerSideProps<{
  preloadedState: Partial<PokemonStateWithoutFunctions>;
}> = async () => {
  const response = await fetch(
    'http://jherr-pokemon.s3.us-west-1.amazonaws.com/index.json'
  );
  const pokemons = (await response.json()) as Pokemon[];

  // create a short-lived, server-side-only zustand store
  const pokemonStore = getPokemonStore.onServer().instance;

  // set raw pokemon list on store
  pokemonStore.getState().setPokemons(pokemons);

  // get current state snapshot
  const pokemonState = pokemonStore.getState();

  // (1) populate props.preloadedState with server-side-fetched data
  // (2) remember, this is grabbed by _app.tsx at pageProps.preloadedState
  // and is used by useStoreRef() to create the both server and client zustand stores
  // (3) the server zustand store is used for SSR/SSG generation
  // (4) the client zustand store is used for app state management which comes
  // with pre-loaded data from the server in this case
  return {
    props: {
      preloadedState: {
        pokemons: pokemonState.pokemons,
      },
    },
  };
};

// this demo is also SSG-friendly
// un-comment getStaticProps() and comment getServerSideProps() to see it

// export const getStaticProps: GetStaticProps<{
//   preloadedState: Partial<PokemonStateWithoutFunctions>;
// }> = async () => {
//   const response = await fetch(
//     'http://jherr-pokemon.s3.us-west-1.amazonaws.com/index.json'
//   );
//   const pokemons = (await response.json()) as Pokemon[];

//   const pokemonStore = getPokemonStore.onServer().instance;
//   pokemonStore.getState().setPokemons(pokemons);
//   const pokemonState = pokemonStore.getState();

//   return {
//     props: {
//       preloadedState: {
//         pokemons: pokemonState.pokemons,
//       },
//     },
//   };
// };
