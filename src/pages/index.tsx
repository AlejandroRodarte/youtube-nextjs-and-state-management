import { useEffect } from 'react';
import { GetServerSideProps } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import { useAtomValue } from 'jotai';

import { AtomsState } from '@/lib/interfaces/atoms-state.interface';
import { DeepPartial } from '@/lib/types/deep-partial.type';
import { Pokemon } from '@/lib/interfaces/pokemon.interface';
import atoms from '@/lib/jotai/atoms.object';
import computedAtoms from '@/lib/jotai/computed-atoms.object';
import styles from '../styles/pages/index.module.css';
import useCssClasses from '@/lib/hooks/use-css-classes.hook';
import usePersistedAtom from '@/lib/jotai/use-persisted-atom.hook';
import useSetPersistedAtom from '@/lib/jotai/use-set-persisted-atom.hook';
import useSyncStorage from '../lib/jotai/use-sync-storage.hook';

interface HomeProps {
  preloadedState: DeepPartial<AtomsState>;
}

export default function Home(props: HomeProps) {
  const setPokemons = useSetPersistedAtom({ atoms: atoms.pokemon.pokemons });
  const [filter, setFilter] = usePersistedAtom({ atoms: atoms.pokemon.filter });

  const filteredPokemons = useAtomValue(computedAtoms.pokemon.filteredPokemons);

  const { classes: mainClasses, remove: removeMainClass } = useCssClasses({
    initialClasses: [styles.main, styles['hidden-element']],
  });

  // when component is mounted...
  // (1) sync store atoms with local storage
  useSyncStorage();
  // (2) override store atom values with custom data; in this case, we use the same
  // ssr/ssg data
  useEffect(() => {
    if (props.preloadedState?.pokemon?.pokemons)
      setPokemons(props.preloadedState.pokemon.pokemons);
    removeMainClass(styles['hidden-element']);
  }, [props.preloadedState, setPokemons, removeMainClass]);

  return (
    <div className={mainClasses}>
      <Head>
        <title>Pokemon</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.png" />
      </Head>
      <div>
        <Link href="/count">Count</Link>
        <input
          type="text"
          value={filter}
          onChange={(e) => setFilter(e.target.value)}
          className={styles.search}
        />
      </div>
      <div className={styles.container}>
        {filteredPokemons.slice(0, 20).map((pokemon) => (
          <div key={pokemon.id} className={styles.image}>
            <img
              alt={pokemon.name}
              src={`http://jherr-pokemon.s3.us-west-1.amazonaws.com/${pokemon.image}`}
            />
            <h2>{pokemon.name}</h2>
          </div>
        ))}
      </div>
    </div>
  );
}

// ssr/ssg async functions can populate a deeply-partial atoms state object type that
// will be used in the hydrateAtoms() helper
export const getServerSideProps: GetServerSideProps<{
  preloadedState: DeepPartial<AtomsState>;
}> = async () => {
  const response = await fetch(
    'http://jherr-pokemon.s3.us-west-1.amazonaws.com/index.json'
  );
  const pokemons = (await response.json()) as Pokemon[];

  return {
    props: { preloadedState: { pokemon: { pokemons } } },
  };
};
