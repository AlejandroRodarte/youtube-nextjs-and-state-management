import { GetServerSideProps, GetStaticProps } from 'next';
import Head from 'next/head';
import Link from 'next/link';

import styles from '../styles/pages/index.module.css';
import selectors from '@/lib/redux/selectors.object';
import { actions } from '@/lib/redux/slices/pokemon/pokemon.slice';
import { getPokemons } from '@/lib/redux/slices/pokemon/async-thunks/get-pokemons.async-thunk';
import { RootState } from '@/lib/redux/root-state.type';
import createStore from '@/lib/redux/create-store.helper';
import useStoreContext from '@/lib/redux/use-store-context.hook';
import { useEffect } from 'react';
import { useAppDispatch } from '@/lib/redux/use-app-dispatch.hook';
import { useAppSelector } from '@/lib/redux/use-app-selector.hook';
import { DeepPartial } from '@/lib/types/deep-partial.type';
import useCssClasses from '@/lib/hooks/use-css-classes.hook';

interface HomeProps {
  preloadedState: DeepPartial<RootState>;
}

export default function Home(props: HomeProps) {
  // access re-hydration api
  const {
    storage: { rehydrate: rehydrateStorage },
    rehydrate,
  } = useStoreContext();

  // dispatch actions
  const dispatch = useAppDispatch();

  // get pieces of data from the root state through selectors
  const pokemons = useAppSelector(selectors.getFilteredPokemons);
  const search = useAppSelector(selectors.getSearch);

  const { classes: mainClasses, remove: removeMainClass } = useCssClasses({
    initialClasses: [styles.main, styles['hidden-element']],
  });

  // when component mounts: (1) re-hydrate store with local storage data
  // and (2) re-hydrate store with SSR data
  // note: it's up to the developer what data to re-hydrate the store with;
  // I use SSR data from props.preloadedState
  useEffect(() => {
    rehydrateStorage();
    rehydrate(props.preloadedState);
    removeMainClass(styles['hidden-element']);
  }, [rehydrate, rehydrateStorage, props.preloadedState, removeMainClass]);

  return (
    <div className={mainClasses}>
      <Head>
        <title>Pokemon</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.png" />
      </Head>
      <div>
        <Link href="/count">Count</Link>
        <input
          type="text"
          value={search}
          onChange={(e) =>
            dispatch(actions.setSearch({ value: e.target.value }))
          }
          className={styles.search}
        />
      </div>
      <div className={styles.container}>
        {pokemons.slice(0, 20).map((pokemon) => (
          <div key={pokemon.id} className={styles.image}>
            <img
              alt={pokemon.name}
              src={`http://jherr-pokemon.s3.us-west-1.amazonaws.com/${pokemon.image}`}
            />
            <h2>{pokemon.name}</h2>
          </div>
        ))}
      </div>
    </div>
  );
}

export const getServerSideProps: GetServerSideProps<{
  preloadedState: DeepPartial<RootState>;
}> = async () => {
  // create server-side store
  const store = createStore.onServer();

  // fetch data and save it in state
  await store.instance.dispatch(getPokemons());

  // get state snapshot
  const state = store.instance.getState();

  // use state snapshot to populate custom deeply-optional root state
  // that we can use to re-hydrate store in the client later on
  return {
    props: {
      preloadedState: {
        pokemon: {
          pokemons: state.pokemon.pokemons,
        },
      },
    },
  };
};

// export const getStaticProps: GetStaticProps<{
//   preloadedState: DeepPartial<RootState>;
// }> = async () => {
//   // create server-side store
//   const store = createStore.onServer();

//   // fetch data and save it in state
//   await store.instance.dispatch(getPokemons());

//   // get state snapshot
//   const state = store.instance.getState();

//   // use state snapshot to populate custom deeply-optional root state
//   // that we can use to re-hydrate store in the client later on
//   return {
//     props: {
//       preloadedState: {
//         pokemon: {
//           pokemons: state.pokemon.pokemons,
//         },
//       },
//     },
//   };
// };
