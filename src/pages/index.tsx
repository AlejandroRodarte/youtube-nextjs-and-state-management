import { GetServerSideProps } from 'next';
import Head from 'next/head';
import { useSelector } from 'react-redux';

import styles from '../styles/pages/index.module.css';
import { useAppDispatch } from '@/lib/redux/use-app-dispatch.hook';
import selectors from '@/lib/redux/selectors.object';
import { actions } from '@/lib/redux/slices/pokemon/pokemon.slice';
import { getStore } from '@/lib/redux/get-store.helper';
import { getPokemons } from '@/lib/redux/slices/pokemon/async-thunks/get-pokemons.async-thunk';
import { RootState } from '@/lib/redux/root-state.type';

interface HomeProps {}

export default function Home(props: HomeProps) {
  // get dispatch function to dispatch actions
  const dispatch = useAppDispatch();

  // get pieces of data from the root state
  const pokemons = useSelector(selectors.getFilteredPokemons);
  const search = useSelector(selectors.getSearch);

  return (
    <div className={styles.main}>
      <Head>
        <title>Pokemon</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.png" />
      </Head>
      <div>
        <input
          type="text"
          value={search}
          onChange={(e) =>
            dispatch(actions.setSearch({ value: e.target.value }))
          }
          className={styles.search}
        />
      </div>
      <div className={styles.container}>
        {pokemons.slice(0, 20).map((pokemon) => (
          <div key={pokemon.id} className={styles.image}>
            <img
              alt={pokemon.name}
              src={`http://jherr-pokemon.s3.us-west-1.amazonaws.com/${pokemon.image}`}
            />
            <h2>{pokemon.name}</h2>
          </div>
        ))}
      </div>
    </div>
  );
}

export const getServerSideProps: GetServerSideProps<{
  initialState: RootState;
}> = async () => {
  // when first load occurs, which is on the server, create a
  // store instance to dispatch async thunk pokemon/getPokemons
  const store = getStore();
  await store.dispatch(getPokemons());
  // after pokemons are populated into the store (at pokemon/getPokemons/fulfilled),
  // get a snapshot of the current root state and pass it to pageProps.initialState,
  // which is then picked by _app.tsx to pre-populate the store client-side
  return { props: { initialState: store.getState() } };
};
