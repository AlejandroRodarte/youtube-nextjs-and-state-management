import { useEffect } from 'react';
import { GetServerSideProps, GetStaticProps } from 'next';
import Head from 'next/head';
import Link from 'next/link';

import { DeepPartial } from '@/lib/types/deep-partial.type';
import { Pokemon } from '@/lib/interfaces/pokemon.interface';
import { State } from '@/lib/rxjs/state.interface';
import { useObservableState } from 'observable-hooks';
import styles from '../styles/pages/index.module.css';
import useBehaviorSubject from '@/lib/rxjs/use-behavior-subject.hook';
import useCssClasses from '@/lib/hooks/use-css-classes.hook';
import useGlobalContext from '@/lib/rxjs/use-global-context.hook';

interface HomeProps {
  preloadedState: DeepPartial<State>;
}

export default function Home(props: HomeProps) {
  const {
    subjectsConfigs,
    computedObservables,
    api: { rehydrateFromStorage },
  } = useGlobalContext();

  const [pokemons, setPokemons] = useBehaviorSubject(
    subjectsConfigs.pokemon.pokemons.subject$
  );

  const [filter, setFilter] = useBehaviorSubject(
    subjectsConfigs.pokemon.filter.subject$
  );

  // (1) computed observables must have an initial value since they begin undefined
  // (2) if an initial value is NOT provided, SSR/SSG will fail
  const filteredPokemons = useObservableState(
    computedObservables.pokemon.filteredPokemons$,
    pokemons
  )!;

  const { classes: mainClasses, remove: removeMainClass } = useCssClasses({
    initialClasses: [styles.main, styles['hidden-element']],
  });

  // when page is mounted, (1) hydrate subjects with data from storage system,
  // (2) perform manual re-hydration of subjects depending on your needs (in my case, I
  // re-hydrate with the same SSR data it started with, but you can override it with whatever you
  // want), and (3) remove hidden CSS class to expose UI
  useEffect(() => {
    rehydrateFromStorage();
    if (props.preloadedState.pokemon?.pokemons)
      setPokemons(props.preloadedState.pokemon.pokemons);
    removeMainClass(styles['hidden-element']);
  }, [
    props.preloadedState,
    rehydrateFromStorage,
    setPokemons,
    removeMainClass,
  ]);

  return (
    <div className={mainClasses}>
      <Head>
        <title>Pokemon</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.png" />
      </Head>
      <div>
        <Link href="/count">Count</Link>
        <input
          type="text"
          value={filter}
          onChange={(e) => setFilter(e.target.value)}
          className={styles.search}
        />
      </div>
      <div className={styles.container}>
        {filteredPokemons.slice(0, 20).map((pokemon) => (
          <div key={pokemon.id} className={styles.image}>
            <img
              alt={pokemon.name}
              src={`http://jherr-pokemon.s3.us-west-1.amazonaws.com/${pokemon.image}`}
            />
            <h2>{pokemon.name}</h2>
          </div>
        ))}
      </div>
    </div>
  );
}

// SSR/SSG code can remain simple
export const getServerSideProps: GetServerSideProps<{
  preloadedState: DeepPartial<State>;
}> = async () => {
  const response = await fetch(
    'http://jherr-pokemon.s3.us-west-1.amazonaws.com/index.json'
  );
  const pokemons = (await response.json()) as Pokemon[];
  return {
    props: { preloadedState: { pokemon: { pokemons } } },
  };
};

// export const getStaticProps: GetStaticProps<{
//   preloadedState: DeepPartial<State>;
// }> = async () => {
//   const response = await fetch(
//     'http://jherr-pokemon.s3.us-west-1.amazonaws.com/index.json'
//   );
//   const pokemons = (await response.json()) as Pokemon[];
//   return {
//     props: { preloadedState: { pokemon: { pokemons } } },
//   };
// };
